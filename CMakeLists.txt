cmake_minimum_required(VERSION 3.20)

SET(CMAKE_DEBUG_POSTFIX d)
SET(WORKINGPATH ${CMAKE_CURRENT_SOURCE_DIR})
SET(OPENSCENEGRAPHIC_DIR ${CMAKE_CURRENT_SOURCE_DIR}/OpenSceneGraph)
SET(OSGEARTH_DIR ${CMAKE_CURRENT_SOURCE_DIR}/osgearth)
SET(OSG_PLUGINS osgPlugins)

if (NOT CMAKE_BUILD_TYPE)
  # CMake defaults to leaving CMAKE_BUILD_TYPE empty. This screws up
  # differentiation between debug and release builds.
  set(CMAKE_BUILD_TYPE "Release" CACHE STRING "Choose the type of build, options are: None (CMAKE_CXX_FLAGS or CMAKE_C_FLAGS used) Debug Release RelWithDebInfo MinSizeRel." FORCE)
endif ()


LIST(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/CMakeModules")

option(OC_BUILD_QT "" FALSE)
SET(OC_QT_PATH "E:/Qt/Qt5.14.2/5.14.2/msvc2017_64" CACHE PATH "E:/Qt/Qt5.14.2/5.14.2/msvc2017_64")

PROJECT(OC)

if (OC_BUILD_QT)
message(STATUS "OC build qt application.")
SET(CMAKE_PREFIX_PATH ${OC_QT_PATH})
FIND_PACKAGE(Qt5Widgets REQUIRED)
IF ( Qt5Widgets_FOUND )
ENDIF( )
endif ()

INCLUDE(OCMacroUtils)
INCLUDE(MacroLogFeature)
#INCLUDE(Dependencies)


# Dynamic vs Static Linking
SET(OSG_MSVC_VERSIONED_DLL ON)
OPTION(DYNAMIC_OPENSCENEGRAPH "Set to ON to build OpenSceneGraph for dynamic linking.  Use OFF for static." ON)
IF   (DYNAMIC_OPENSCENEGRAPH)
    SET(OPENSCENEGRAPH_USER_DEFINED_DYNAMIC_OR_STATIC "SHARED")
ELSE ()
    SET(OPENSCENEGRAPH_USER_DEFINED_DYNAMIC_OR_STATIC "STATIC")
ENDIF()

SET(CMAKE_RELWITHDEBINFO_POSTFIX "" CACHE STRING "add a postfix, usually empty on windows")

IF(WIN32)
    SET_PROPERTY(GLOBAL PROPERTY USE_FOLDERS ON)
    SET(OUTPUT_BINDIR ${CMAKE_CURRENT_SOURCE_DIR}/bin)
ELSE(WIN32)
    SET(OUTPUT_BINDIR ${CMAKE_CURRENT_SOURCE_DIR}/bin)
ENDIF(WIN32)

SET(OUTPUT_LIBDIR ${WORKINGPATH}/lib)

SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${OUTPUT_LIBDIR})
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${OUTPUT_BINDIR})
IF(WIN32)
    SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${OUTPUT_BINDIR})
ELSE(WIN32)
    SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${OUTPUT_LIBDIR})
ENDIF(WIN32)

FOREACH(CONF ${CMAKE_CONFIGURATION_TYPES})        # For each configuration (Debug, Release, MinSizeRel... and/or anything the user chooses)
    STRING(TOUPPER "${CONF}" CONF)                # Go uppercase (DEBUG, RELEASE...)
    SET("CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${CONF}" "${OUTPUT_LIBDIR}")
    SET("CMAKE_RUNTIME_OUTPUT_DIRECTORY_${CONF}" "${OUTPUT_BINDIR}")
    IF(WIN32)
        SET("CMAKE_LIBRARY_OUTPUT_DIRECTORY_${CONF}" "${OUTPUT_BINDIR}")
    ELSE()
        SET("CMAKE_LIBRARY_OUTPUT_DIRECTORY_${CONF}" "${OUTPUT_LIBDIR}")
    ENDIF()
ENDFOREACH()

if(MSVC)
	add_definitions( /wd26495 /wd26812)
endif()

LINK_DIRECTORIES(${WORKINGPATH}/3rdParty/lib)
LINK_DIRECTORIES(${OUTPUT_LIBDIR})
LINK_DIRECTORIES(${PROJECT_BINARY_DIR})
SET(OPENSCENEGRAPHIC_LIB ${OPENSCENEGRAPHIC_DIR}/build/lib)
IF(WIN32)
SET(OSGEARTH_LIB ${OSGEARTH_DIR}/build/lib/$(Configuration))
ELSE(WIN32)
SET(OSGEARTH_LIB ${OSGEARTH_DIR}/build/lib)
ENDIF(WIN32)
LINK_DIRECTORIES(${OPENSCENEGRAPHIC_LIB})
LINK_DIRECTORIES(${OSGEARTH_LIB})
ADD_SUBDIRECTORY(${WORKINGPATH}/src)
